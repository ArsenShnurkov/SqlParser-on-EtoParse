simple_Latin_upper_case_letter =
		"A" | "B" | "C" | "D" | "E" |
		"F" | "G" | "H" | "I" | "J" |
		"K" | "L" | "M" | "N" | "O" |
		"P" | "Q" | "R" | "S" | "T" |
		"U" | "V" | "W" | "X" | "Y" | "Z"
		;

simple_Latin_lower_case_letter =
		"a" | "b" | "c" | "d" | "e" |
		"f" | "g" | "h" | "i" | "j" |
		"k" | "l" | "m" | "n" | "o" |
		"p" | "q" | "r" | "s" | "t" |
		"u" | "v" | "w" | "x" | "y" | "z"
		;

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
		;

asterisk = "*" ;
period = "." ;
equals_operator = "=" ;
underscore = "_" ;
quote = "'";
comma = ",";
left_paren = "(";
right_paren = ")";
double_quote = "\x0022";

quote_symbol := quote, quote ;
nonquote_character := ? Terminals.AnyChar ? - quote ;
doublequote_symbol := double_quote, double_quote;
nondoublequote_character := ? Terminals.AnyChar ? - doublequote_symbol ;

reserved_word =	"SELECT"
	| "FROM"
	| "AS"
	| "INNER"
	| "JOIN"
	| "ON"
	| "WHERE"
	;

identifier_start = simple_Latin_upper_case_letter | simple_Latin_lower_case_letter | underscore ;
identifier_extend = identifier_start | digit ;
regular_identifier := identifier_start, { identifier_extend } ;

delimited_identifier = double_quote, delimited_identifier_body, double_quote;
delimited_identifier_body = {delimited_identifier_part};
delimited_identifier_part = nondoublequote_character | doublequote_symbol;

actual_identifier = regular_identifier | delimited_identifier;

identifier = actual_identifier;

column_name = identifier;
correlation_name = identifier;
query_name = identifier;
catalog_name = identifier;
qualified_identifier = identifier;

identifier_chain = identifier, [ { period, identifier } ];
basic_identifier_chain = identifier_chain;



character_string_literal :=	quote, { character_representation }, quote ;
character_representation := nonquote_character | quote_symbol;

query_specification = SELECT, select_list, table_expression ;
table_expression = from_clause, [where_clause] ; (* , [group_by_clause], [ having_clause], [window_clause] ; *)
select_list = asterisk ; (* | select_sublist [ { comma, select_sublist } ]; *)
from_clause = "FROM", table_reference_list;
table_reference_list = table_reference, [ { comma, table_reference } ] ;
table_reference = table_primary_or_joined_table; (* [ <sample clause> ] *)
table_primary_or_joined_table = table_primary | joined_table ;
table_primary = table_or_query_name [ [ "AS" ], correlation_name ];
(*<table primary> ::= 
		<table or query name> [ [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ] ]
	|	<derived table> [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ]
	|	<lateral derived table> [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ]
	|	<collection derived table> [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ]
	|	<table function derived table> [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ]
	|	<only spec> [ [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ] ]
	|	<left paren> <joined table> <right paren> *)
joined_table = qualified_join;
(*	<cross join>
	|	<qualified join>
	|	<natural join>
	|	<union join> *)

qualified_join = table_reference, [ join_type ], "JOIN", table_reference, join_specification;
join_type = "INNER" | outer_join_type, [ "OUTER" ] ;
outer_join_type = "LEFT" | "RIGHT" | "FULL" ;

join_specification = join_condition | named_columns_join;
join_condition = "ON", search_condition ;

named_columns_join = "USING" left_paren join_column_list, right_paren;

join_column_list = column_name_list;

column_name_list = column_name, [ { comma, column_name } ];

table_or_query_name = table_name | query_name ;
table_name = local_or_schema_qualified_name;

local_or_schema_qualified_name = local_or_schema_qualifier, period, qualified_identifier;
local_or_schema_qualifier = schema_name | "MODULE";

schema_name = [ catalog_name, period ], unqualified_schema_name;
unqualified_schema_name = identifier;


where_clause = "WHERE", search_condition;

search_condition = boolean_value_expression;

boolean_value_expression = boolean_term | boolean_value_expression, "OR", boolean_term ;
boolean_term = boolean_factor | boolean_term, "AND", boolean_factor ;
boolean_factor = [ "NOT" ], boolean_test ;
boolean_test = boolean_primary, [ "IS", [ "NOT" ], truth_value ];
truth_value = "TRUE" | "FALSE" | "UNKNOWN";
boolean_primary = predicate | boolean_predicand;
boolean_predicand = parenthesized_boolean_value_expression | nonparenthesized_value_expression_primary;
parenthesized_boolean_value_expression = left_paren, boolean_value_expression, right_paren;
nonparenthesized_value_expression_primary = column_reference;
(* | field_reference | reference_resolution *)
(* 
		<unsigned value specification>
	|	<column reference>
	|	<set function specification>
	|	<window function>
	|	<scalar subquery>
	|	<case expression>
	|	<cast specification>
	|	<field reference>
	|	<subtype treatment>
	|	<method invocation>
	|	<static method invocation>
	|	<new specification>
	|	<attribute or method reference>
	|	<reference resolution>
	|	<collection value constructor>
	|	<array element reference>
	|	<multiset element reference>
	|	<routine invocation>
	|	<next value expression>
*)
column_reference = basic_identifier_chain ;
(* |	"MODULE" period, <qualified identifier> <period> <column name> *)

SQL_procedure_statement =  { reserved_word | regular_identifier | character_string_literal  
		| asterisk | period | equals_operator | underscore | quote
		} ;
